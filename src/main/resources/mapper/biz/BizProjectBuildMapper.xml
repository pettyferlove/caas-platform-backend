<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.pettyfer.caas.framework.biz.mapper.BizProjectBuildMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.github.pettyfer.caas.framework.biz.entity.BizProjectBuild">
        <result column="id" property="id" />
        <result column="del_flag" property="delFlag" />
        <result column="creator" property="creator" />
        <result column="create_time" property="createTime" />
        <result column="modifier" property="modifier" />
        <result column="modify_time" property="modifyTime" />
        <result column="parent_id" property="parentId" />
        <result column="namespace_id" property="namespaceId" />
        <result column="project_name" property="projectName" />
        <result column="depository_type" property="depositoryType" />
        <result column="remote_project_id" property="remoteProjectId" />
        <result column="remote_path" property="remotePath" />
        <result column="remote_branch" property="remoteBranch" />
        <result column="remote_owner" property="remoteOwner" />
        <result column="remote_repo" property="remoteRepo" />
        <result column="open_auto_build" property="openAutoBuild" />
        <result column="need_build_project" property="needBuildProject" />
        <result column="build_tool" property="buildTool" />
        <result column="build_command" property="buildCommand" />
        <result column="build_params" property="buildParams" />
        <result column="pre_shell_script" property="preShellScript" />
        <result column="post_shell_script" property="postShellScript" />
        <result column="run_pre_shell_script" property="runPreShellScript" />
        <result column="run_post_shell_script" property="runPostShellScript" />
        <result column="need_build_image" property="needBuildImage" />
        <result column="build_target_path" property="buildTargetPath" />
        <result column="build_target_name" property="buildTargetName" />
        <result column="dockerfile_already_exists" property="dockerfileAlreadyExists" />
        <result column="dockerfile_path" property="dockerfilePath" />
        <result column="dockerfile_content" property="dockerfileContent" />
        <result column="project_hook_id" property="projectHookId" />
        <result column="trigger_method" property="triggerMethod" />
        <result column="images_depository_alias" property="imagesDepositoryAlias" />
        <result column="source_project_name" property="sourceProjectName" />
        <result column="source_project_web_url" property="sourceProjectWebUrl" />
        <result column="images_depository_id" property="imagesDepositoryId" />
        <result column="persistent_build_file" property="persistentBuildFile" />
        <result column="env_type" property="envType" />
        <result column="group_id" property="groupId" />
        <result column="tenant_id" property="tenantId" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id,
        del_flag,
        creator,
        create_time,
        modifier,
        modify_time,
        parent_id, namespace_id, project_name, depository_type, remote_project_id, remote_path, remote_branch, remote_owner, remote_repo, open_auto_build, need_build_project, build_tool, build_command, build_params, pre_shell_script, post_shell_script, run_pre_shell_script, run_post_shell_script, need_build_image, build_target_path, build_target_name, dockerfile_already_exists, dockerfile_path, dockerfile_content, project_hook_id, trigger_method, images_depository_alias, source_project_name, source_project_web_url, images_depository_id, persistent_build_file, env_type, group_id, tenant_id
    </sql>
    <select id="queryProjectBuildList" resultType="com.github.pettyfer.caas.framework.core.model.ProjectBuildListView">
        select
            <include refid="Base_Column_List"></include>,
            (select h.id from biz_project_build_history h where t.id = h.build_id and h.del_flag = 0 order by create_time desc limit 1) history_id,
            (select h.job_id from biz_project_build_history h where t.id = h.build_id and h.del_flag = 0 order by create_time desc limit 1) job,
            (select h.build_status from biz_project_build_history h where t.id = h.build_id and h.del_flag = 0 order by create_time desc limit 1) last_state,
            (select h.create_time from biz_project_build_history h where t.id = h.build_id and h.del_flag = 0 order by create_time desc limit 1) last_build_time
        from biz_project_build t
        ${ew.customSqlSegment}
    </select>

</mapper>
